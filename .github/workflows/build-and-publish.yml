name: build-and-publish

permissions:
  contents: write

on:
  push:
    branches: [ "feat/build-addon" ]    # roda em TODO push
    tags:     [ "v*.*.*" ] # e também quando criar tag de release
  workflow_dispatch: {}
jobs:
  prebuild:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Instala dependências de runtime/build no RUNNER (sem vendor)
      - name: Install system deps (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential python3 \
            tesseract-ocr libtesseract-dev libleptonica-dev \
            libgif7 libpng16-16 libjpeg-turbo8 libtiff5 libwebp7 libopenjp2-7 zlib1g \
            patchelf

      - name: Install deps (no scripts)
        run: npm ci --ignore-scripts

      - name: Build addon
        run: npm run build

      - name: Generate prebuild (N-API)
        run: npx prebuild --napi --strip

      - name: Place .node in prebuilds layout
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p prebuilds/linux-x64
          # pegue o .node gerado pela prebuild (ajuste o path conforme seu output)
          NODEFILE=$(find . -name "*.node" | head -n1)
          cp -f "$NODEFILE" prebuilds/linux-x64/node.napi.node

      - name: Bundle shared libs into prebuilds (Linux)
        run: bash tools/bundle-linux.sh

      - name: Assert prebuilds present
        run: |
          ls -al prebuilds/linux-x64
          test -f prebuilds/linux-x64/node.napi.node

      - name: Upload prebuild artifact
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-linux-x64
          path: prebuilds/

  release:
    needs: prebuild
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: prebuilds-linux-x64
          path: .

      - name: Show tree
        run: ls -R

      - name: npm pack --dry-run
        run: npm pack --dry-run

      - name: Write npmrc
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
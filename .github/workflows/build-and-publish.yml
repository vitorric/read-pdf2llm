name: build-and-publish

permissions:
  contents: write

on:
  push:
    branches: [ "feat/build-addon" ]    # roda em TODO push
    tags:     [ "v*.*.*" ] # e também quando criar tag de release
  workflow_dispatch: {}

jobs:
  prebuild:
    strategy:
      fail-fast: false
      matrix:
        #os:   [ubuntu-latest, macos-latest, windows-latest]
        #node: [18, 20, 22]
        os:   [ubuntu-latest]
        node: [20]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python 3.10 (for node-gyp tools)
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Fetch vendor bundle for this runner
        run: npm run fetch:vendor
        env:
          REPO_SLUG: ${{ github.repository }}
          VENDOR_RELEASE_TAG: vendor-v1   # troque se usou outro nome
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install deps
        run: npm install

      - name: Build (sanity)
        run: npm run build

      - name: Generate prebuilds (N-API)
        run: npm run prebuild

      - name: Assert prebuilds exist
        shell: bash
        run: |
          echo "Tree of prebuilds produced by this runner:"
          ls -R prebuilds || true
          test -n "$(find prebuilds -type f -name '*.node' -print -quit)" || { echo 'No .node files in prebuilds/'; exit 1; }

      - name: Upload prebuild artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-${{ runner.os }}-node${{ matrix.node }}
          path: prebuilds/
          if-no-files-found: error

  release:
    needs: prebuild
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download prebuild artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: prebuilds-*
          merge-multiple: true
          path: prebuilds-agg

      - name: Show downloaded tree
        run: |
          echo "::group::Artifacts"
          ls -R prebuilds-agg || true
          echo "::endgroup::"

      - name: Merge prebuilds into package tree
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          mkdir -p prebuilds
          echo "Downloaded artifacts layout:"
          ls -R prebuilds-agg || true

          # Caso 1: artifacts empacotados com raiz 'prebuilds/'
          found=0
          for f in prebuilds-agg/**/prebuilds/**; do
            dest="prebuilds/${f#*/prebuilds/}"
            mkdir -p "$(dirname "$dest")"
            cp -f "$f" "$dest"
            found=1
          done

          # Caso 2: artifacts contendo diretamente linux-x64/, win32-x64/, etc.
          if [ "$found" = "0" ]; then
            for dir in prebuilds-agg/**; do
              [ -d "$dir" ] || continue
              # se dentro tiver subpastas de plataforma com .node, copie pra prebuilds/
              if find "$dir" -maxdepth 2 -type f -name '*.node' | grep -q .; then
                rsync -a "$dir"/ prebuilds/
                found=1
              fi
            done
          fi

          echo "Merged prebuilds (should contain <os>-<arch>/*.node):"
          ls -R prebuilds || true
          test -n "$(find prebuilds -type f -name '*.node' -print -quit)" || { echo 'No .node files after merge'; exit 1; }

      - name: npm pack --dry-run (should list prebuilds/**)
        run: npm pack --dry-run
        
      - name: Write npmrc
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Publicar SEM scripts (não precisa instalar nada)
      - name: Publish to npm (no scripts)
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_IGNORE_SCRIPTS: 'true'

      - name: Create GitHub Release with assets
        if: ${{ hashFiles('prebuilds/**') != '' }}
        uses: softprops/action-gh-release@v2
        with:
          files: prebuilds/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
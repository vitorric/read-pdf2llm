name: build-and-publish
permissions:
  contents: write

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  workflow_dispatch: {}

jobs:
  prebuild-linux:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.04
    steps:
      - uses: actions/checkout@v4

      - name: System deps (Ubuntu 24.04)
        shell: bash
        run: |
          set -euxo pipefail
          apt-get update
          apt-get install -y \
            curl gnupg ca-certificates wget git python3 make g++ build-essential \
            tesseract-ocr libtesseract-dev libleptonica-dev software-properties-common \
            tesseract-ocr-por pkg-config patchelf
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs

      - name: Download PDFium (linux-x64)
        shell: bash
        env:
          PDFIUM_DIR: ${{ github.workspace }}/pdfium
        run: |
          set -euxo pipefail
          mkdir -p "$PDFIUM_DIR"
          curl -L https://github.com/bblanchon/pdfium-binaries/releases/latest/download/pdfium-linux-x64.tgz -o pdfium.tgz
          tar -xzf pdfium.tgz -C "$PDFIUM_DIR"
          test -f "$PDFIUM_DIR/include/fpdfview.h"
          rm -f pdfium.tgz
          echo "PDFIUM_DIR=$PDFIUM_DIR" >> $GITHUB_ENV

      - name: Install deps (no scripts)
        shell: bash
        run: npm install --ignore-scripts

      - name: Debug node-addon-api include path
        shell: bash
        run: |
          set -euxo pipefail
          node -p "require('node-addon-api').include_dir || require('node-addon-api').include"
          test -f "$(node -p "require('node-addon-api').include_dir || require('node-addon-api').include")/napi.h" && echo "napi.h OK"

      - name: Debug PDFIUM_DIR
        shell: bash
        run: |
          set -euxo pipefail
          echo "PDFIUM_DIR=${PDFIUM_DIR:-<unset>}"
          test -f "$PDFIUM_DIR/include/fpdfview.h" || (echo "Missing fpdfview.h in $PDFIUM_DIR/include"; exit 1)

      - name: Build addon (uses PDFIUM_DIR)
        shell: bash
        env:
          PDFIUM_DIR: ${{ env.PDFIUM_DIR }}
        run: |
          set -euxo pipefail
          npx node-gyp configure
          npx node-gyp build

      - name: Generate prebuild (N-API)
        shell: bash
        run: npx prebuild --napi --strip

      - name: Place .node in prebuilds/ layout
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p prebuilds/linux-x64
          NODEFILE=$(find . -name "*.node" | head -n1)
          cp -f "$NODEFILE" prebuilds/linux-x64/node.napi.node

      - name: Ensure bundle script is executable (fallback)
        shell: bash
        run: chmod +x tools/bundle-linux.sh

      - name: Bundle shared libs into prebuilds (Linux)
        shell: bash
        env:
          PDFIUM_DIR: ${{ env.PDFIUM_DIR }}
        run: |
          set -euxo pipefail
          bash tools/bundle-linux.sh
          ls -al prebuilds/linux-x64
          ldd prebuilds/linux-x64/node.napi.node

      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-linux-x64
          path: prebuilds/
          if-no-files-found: error

  release:
    needs: prebuild-linux
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: prebuilds-linux-x64
          path: prebuilds/

      - name: Show prebuilds tree
        shell: bash
        run: |
          set -euxo pipefail
          echo "::group::./prebuilds"
          find prebuilds -maxdepth 3 -type f -print
          echo "::endgroup::"
 
      - name: Force-include prebuilds (npmignore)
        shell: bash
        run: |
          set -euxo pipefail
          {
            echo "node_modules"
            echo ".git"
            echo ".github"
            echo "*.log"
            echo "npm-debug.log*"
            echo
            echo "!prebuilds/**"
          } > .npmignore
          echo "--- .npmignore ---"
          cat .npmignore

      - name: Remove prebuild .tar.gz payloads
        shell: bash
        run: |
          set -euxo pipefail
          find prebuilds -type f -name '*.tar.gz' -print -delete || true

      - name: npm pack --dry-run (should list prebuilds/**)
        run: npm pack --dry-run
      - name: Assert tarball content (no install script, no binding.gyp, has prebuilds)
        shell: bash
        run: |
          set -euo pipefail
          npm pack --dry-run --json > pack.json
          node -e 'const fs=require("fs");
            const j=JSON.parse(fs.readFileSync("pack.json","utf8"))[0];
            const files=j.files.map(f=>f.path);
            const pkg=require("./package.json");
            if(pkg.scripts && pkg.scripts.install){console.error("ERRO: script install presente");process.exit(1);}
            if(files.includes("binding.gyp")){console.error("ERRO: binding.gyp no tarball");process.exit(1);}
            if(!files.some(p=>p.startsWith("prebuilds/"))){console.error("ERRO: sem prebuilds no tarball");process.exit(1);}
            console.log("OK: tarball vÃ¡lido");'

      - name: Write npmrc
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

name: build-and-publish

permissions:
  contents: write

on:
  push:
    branches: [ "feat/build-addon" ]    # roda em TODO push
    tags:     [ "v*.*.*" ] # e também quando criar tag de release
  workflow_dispatch: {}

jobs:
  prebuild:
    strategy:
      fail-fast: false
      matrix:
        #os:   [ubuntu-latest, macos-latest, windows-latest]
        #node: [18, 20, 22]
        os:   [ubuntu-latest]
        node: [20]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python 3.10 (for node-gyp tools)
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Fetch vendor bundle for this runner
        run: npm run fetch:vendor
        env:
          REPO_SLUG: ${{ github.repository }}
          VENDOR_RELEASE_TAG: vendor-v1   # troque se usou outro nome
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install deps
        run: npm install

      - name: Build (sanity)
        run: npm run build

      - name: Generate prebuilds (N-API)
        run: npm run prebuild

      - name: Assert prebuild tarballs exist
        shell: bash
        run: |
          echo "Tree of prebuilds produced by this runner:"
          ls -R prebuilds || true
          test -n "$(find prebuilds -type f -name '*.tar.gz' -print -quit)" || { echo 'No .tar.gz files in prebuilds/'; exit 1; }

      - name: Upload prebuild artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-${{ runner.os }}-node${{ matrix.node }}
          path: prebuilds/
          if-no-files-found: error

  release:
    needs: prebuild
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download prebuild artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: prebuilds-*
          merge-multiple: true
          path: prebuilds-agg

      - name: Show downloaded tree
        run: |
          echo "::group::Artifacts"
          ls -R prebuilds-agg || true
          echo "::endgroup::"

      - name: Extract prebuild tarballs into prebuilds/ layout
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          mkdir -p prebuilds

          echo "::group::Artifacts tree"
          ls -R prebuilds-agg || true
          echo "::endgroup::"

          for tgz in prebuilds-agg/**/*.tar.gz prebuilds-agg/*.tar.gz; do
            [ -f "$tgz" ] || continue
            fname="$(basename "$tgz")"

            # read-pdf2llm-v1.0.8-node-v115-linux-x64.tar.gz
            plat="$(echo "$fname" | sed -E 's/.*-(linux|darwin|win32)-(x64|arm64)\.tar\.gz/\1/')"
            arch="$(echo "$fname" | sed -E 's/.*-(linux|darwin|win32)-(x64|arm64)\.tar\.gz/\2/')"

            out="prebuilds/${plat}-${arch}"
            tmpdir="$(mktemp -d)"
            echo "Extracting $fname -> $tmpdir"
            tar -xzf "$tgz" -C "$tmpdir"

            # ache o .node e as libs de runtime
            nodefile="$(find "$tmpdir" -type f -name '*.node' | head -n1 || true)"
            mkdir -p "$out"

            if [ -n "${nodefile:-}" ]; then
              cp -f "$nodefile" "$out/node.napi.node"
              if [ "$plat" = "linux" ]; then
                cp -f "$nodefile" "$out/node.napi.glibc.node" || true
                cp -f "$nodefile" "$out/node.napi.musl.node"  || true
              fi
            fi

            # ✅ COPIE AS LIBS DE RUNTIME PRO MESMO DIRETÓRIO DO .node
            # Linux: .so/.so.*
            find "$tmpdir" -type f \( -name '*.so' -o -name '*.so.*' \) -exec cp -f {} "$out"/ \; || true
            # macOS: .dylib
            find "$tmpdir" -type f -name '*.dylib' -exec cp -f {} "$out"/ \; || true
            # Windows: .dll
            find "$tmpdir" -type f -name '*.dll' -exec cp -f {} "$out"/ \; || true

            rm -rf "$tmpdir"
          done

          echo "::group::Merged prebuilds"
          ls -al prebuilds/* || true
          echo "::endgroup::"

          # Falha se não tiver nenhum .node
          test -n "$(find prebuilds -type f -name '*.node' -print -quit)" || { echo 'No .node files after extraction'; exit 1; }

        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          mkdir -p prebuilds

          echo "::group::Artifacts tree"
          ls -R prebuilds-agg || true
          echo "::endgroup::"

          # Para cada .tar.gz gerado pelo prebuild
          for tgz in prebuilds-agg/**/*.tar.gz prebuilds-agg/*.tar.gz; do
            [ -f "$tgz" ] || continue
            fname="$(basename "$tgz")"

            # Extrai plataforma/arquitetura do nome do arquivo
            # Ex.: read-pdf2llm-v1.0.7-node-v115-linux-x64.tar.gz
            plat="$(echo "$fname" | sed -E 's/.*-(linux|darwin|win32)-(x64|arm64)\.tar\.gz/\1/')"
            arch="$(echo "$fname" | sed -E 's/.*-(linux|darwin|win32)-(x64|arm64)\.tar\.gz/\2/')"

            out="prebuilds/${plat}-${arch}"
            mkdir -p "$out"

            echo "Extracting $fname -> $out"
            tar -xzf "$tgz" -C "$out"

            # Ache o .node dentro do tar e garanta nome amigável para N-API
            nodefile="$(find "$out" -type f -name '*.node' | head -n1 || true)"
            if [ -n "${nodefile:-}" ]; then
              cp -f "$nodefile" "$out/node.napi.node"
            fi
          done

          echo "::group::Merged prebuilds (should list <os>-<arch>/node.napi.node)"
          ls -R prebuilds || true
          echo "::endgroup::"

          # Falha se não tiver nenhum .node
          test -n "$(find prebuilds -type f -name '*.node' -print -quit)" || { echo 'No .node files after extraction'; exit 1; }

      - name: npm pack --dry-run (should list prebuilds/**)
        run: npm pack --dry-run
        
      - name: Write npmrc
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Publicar SEM scripts (não precisa instalar nada)
      - name: Publish to npm (no scripts)
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_IGNORE_SCRIPTS: 'true'

      - name: Create GitHub Release with assets
        if: ${{ hashFiles('prebuilds/**') != '' }}
        uses: softprops/action-gh-release@v2
        with:
          files: prebuilds/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}